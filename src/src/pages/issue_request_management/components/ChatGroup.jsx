import React, { useEffect, useState } from 'react'
import RecievedMessageGroup from './RecievedMessageGroup'
import SentMessageGroup from './SentMessageGroup'
import ChatUpdate from './ChatUpdate'

function ChatGroup(props) {

    const [groupedData, setGroupedData] = useState([])

    useEffect(() => {
        var tmp = []
        var tmp_arr = []

        console.log(props.data)
        
        if(props.data !== null && props.data !== undefined){
            var tmp2 = props.data['remarks'].sort((a,b)=>{
                var t1 = a['madeon'].localeCompare(b['madeon'])
                if(t1 !== 0){
                    return t1
                }
                else{
                    return -1*(a['autogenerated'].localeCompare(b['autogenerated']))
                }
            })
            tmp2.forEach(element => {
                if(tmp_arr.length === 0){
                    tmp_arr.push(element)
                }
                else{
                    if(tmp_arr.at(-1)['remarkeruserid'] === element['remarkeruserid'] && element['autogenerated'] == 'N'){
                        if(tmp_arr.at(-1)['autogenerated'] === 'Y'){
                            tmp.push(tmp_arr);
                            tmp_arr = [element];
                        }
                        else{
                            tmp_arr.push(element)
                        }
                    }
                    else{
                        tmp.push(tmp_arr);
                        tmp_arr = [element];
                    }
                }
            });

            if (tmp_arr !== []){
                tmp.push(tmp_arr)
            }

            setGroupedData(tmp)
        }
    
        return () => {
            
        }
    }, [props.data])
    
  return (
    <>
        {props.data && <ChatUpdate message={[{"remarks": "Issue Registered"}]}/> }
        {   
            groupedData && groupedData.map((elem) => {
                if(elem[0]['autogenerated'] === 'Y'){
                    return <ChatUpdate key={elem.at(-1)['madeon'] + 'update'} message={elem} docData={props.data ? props.data['supportingDocuments'] : {}} />
                }
                if ( elem[0]['remarkeruserid'] === window.sessionStorage.getItem('sessionToken') ){
                    return <SentMessageGroup key={elem.at(-1)['madeon'] + 'sent'} data={elem} />
                }
                return <RecievedMessageGroup key={elem.at(-1)['madeon'] + 'recv'} data={elem} />
            })
        }
    </>
  )
}

export default ChatGroup