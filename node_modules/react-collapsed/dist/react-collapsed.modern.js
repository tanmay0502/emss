import*as e from"react";import{useState as n,useRef as t,useCallback as o,useEffect as r,useLayoutEffect as l}from"react";import{flushSync as i}from"react-dom";import a from"tiny-warning";function s(){return s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},s.apply(this,arguments)}function c(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n.indexOf(t=l[o])>=0||(r[t]=e[t]);return r}const d=()=>{};function u(e){return null!=e&&e.current?e.current.scrollHeight:(a(!0,"useCollapse was not able to find a ref to the collapse element via `getCollapseProps`. Ensure that the element exposes its `ref` prop. If it exposes the ref prop under a different name (like `innerRef`), use the `refKey` property to change it. Example:\n\n{...getCollapseProps({refKey: 'innerRef'})}"),"auto")}const p=(...e)=>(...n)=>e.forEach(e=>e&&e(...n));function f(...e){return e.every(e=>null==e)?null:n=>{e.forEach(e=>{!function(e,n){if(null!=e)if("function"==typeof e)e(n);else try{e.current=n}catch(t){throw new Error(`Cannot assign value "${n}" to ref "${e}"`)}}(e,n)})}}const h="undefined"!=typeof window?l:r;let g=!1,m=0;const x=()=>++m,y=e.useId,E=["duration","easing","collapseStyles","expandStyles","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","isExpanded","defaultExpanded","hasDisabledAnimation"],b=["disabled","onClick"],C=["style","onTransitionEnd","refKey"],w="cubic-bezier(0.4, 0, 0.2, 1)";function v(e={}){let{duration:l,easing:m=w,collapseStyles:v={},expandStyles:S={},onExpandStart:k=d,onExpandEnd:$=d,onCollapseStart:A=d,onCollapseEnd:O=d,isExpanded:P,defaultExpanded:T=!1,hasDisabledAnimation:q=!1}=e,D=c(e,E);const[F,K]=function(e,l){const[i,s]=n(l||!1),c=t(null!=e),d=c.current?e:i,u=o(e=>{c.current||s(e)},[]);return r(()=>{a(!(c.current&&null==e),"useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop."),a(!(!c.current&&null!=e),"useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.")},[e]),[d,u]}(P,T),j=void 0!==y?y():function(e){const t=g?x():null,[o,l]=n(t);return h(()=>{null===o&&l(x())},[]),r(()=>{!1===g&&(g=!0)},[]),null!=o?String(o):void 0}(),I=t(null);!function(e){let n=e=>{};"production"!==process.env.NODE_ENV&&(n=e=>{if(null==e||!e.current)return;const{paddingTop:n,paddingBottom:t}=window.getComputedStyle(e.current);a(!(n&&"0px"!==n||t&&"0px"!==t),"react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.")}),r(()=>{n(e)},[e])}(I);const N=`${D.collapsedHeight||0}px`,z={display:"0px"===N?"none":"block",height:N,overflow:"hidden"},[H,R]=n(F?{}:z),B=e=>{i(()=>{R(e)})},M=e=>{B(n=>s({},n,e))};function V(e){if(q)return{};const n=l||function(e){if(!e||"string"==typeof e)return 0;const n=e/36;return Math.round(10*(4+15*n**.25+n/5))}(e);return{transition:`height ${n}ms ${m}`}}!function(e,n){const o=t(!0);r(()=>{o.current?o.current=!1:F?requestAnimationFrame(()=>{k(),M(s({},S,{willChange:"height",display:"block",overflow:"hidden"})),requestAnimationFrame(()=>{const e=u(I);M(s({},V(e),{height:e}))})}):requestAnimationFrame(()=>{A();const e=u(I);M(s({},v,V(e),{willChange:"height",height:e})),requestAnimationFrame(()=>{M({height:N,overflow:"hidden"})})})},n)}(0,[F,N]);const _=e=>{if(e.target===I.current&&"height"===e.propertyName)if(F){const e=u(I);e===H.height?B({}):M({height:e}),$()}else H.height===N&&(B(z),O())};return{getToggleProps:function(e={}){let{disabled:n=!1,onClick:t=d}=e,o=c(e,b);return s({type:"button",role:"button",id:`react-collapsed-toggle-${j}`,"aria-controls":`react-collapsed-panel-${j}`,"aria-expanded":F,tabIndex:0,disabled:n},o,{onClick:n?d:p(t,()=>K(e=>!e))})},getCollapseProps:function(e={}){let{style:n={},onTransitionEnd:t=d,refKey:o="ref"}=e,r=c(e,C);return s({id:`react-collapsed-panel-${j}`,"aria-hidden":!F},r,{[o]:f(I,r[o]),onTransitionEnd:p(_,t),style:s({boxSizing:"border-box"},n,H)})},isExpanded:F,setExpanded:K}}export{v as default};
//# sourceMappingURL=react-collapsed.modern.js.map
